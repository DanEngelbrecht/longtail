name: Validate PR

on:
  pull_request:
    branches: [ main ]

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'
  config: 'Debug'

jobs:
  cancel-old-build:
 
    runs-on: ubuntu-latest
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

  msvc-analyze:
    name: MSVC Analyze
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure CMake
        run: cmake -B ${{ env.build }} -DCMAKE_BUILD_TYPE=${{ env.config }}

      # Build is not required unless generated source files are used
      # - name: Build CMake
      #   run: cmake --build ${{ env.build }} --config ${{ env.config }}

      - name: Run MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@v0.1.1
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          buildConfiguration: ${{ env.config }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset
          # Paths to ignore analysis of CMake targets and includes
          # ignoredPaths: ${{ github.workspace }}/dependencies;${{ github.workspace }}/test

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      - name: Upload SARIF as an Artifact
        uses: actions/upload-artifact@v2
        with:
          name: sarif-file
          path: ${{ steps.run-analysis.outputs.sarif }}

  # A workflow run is made up of one or more jobs that can run sequentially or in parallel.
  run-cpptest-make:
    name: C/C++test Analyze

    # Specifies the type of runner that the job will run on.
    runs-on: ubuntu-latest

    # Specifies required permissions for upload-sarif action
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

    # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
    - name: Checkout code
      uses: actions/checkout@v3

    # Builds your Make project using 'cpptesttrace' to collect input data for code analysis.
    # Be sure 'cpptesttrace' is available on $PATH.
    - name: Build project
      run: cpptesttrace make clean all

    # Runs code analysis with C/C++test.
    - name: Run C/C++test
      # Use the 'run-cpptest-action' GitHub action.
      uses: parasoft/run-cpptest-action@2.0.1
      # Uncomment if you are using C/C++test 2020.2 to generate a SARIF report:
      # with:
      #   reportFormat: xml,html,custom
      #   additionalParams: '-property report.custom.extension=sarif -property report.custom.xsl.file=${PARASOFT_SARIF_XSL}'

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: reports/report.sarif

    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: CpptestReports
        path: reports/*.*

  codeql-analyze:
    name: CodeQL Analyze
    runs-on: 'ubuntu-latest'
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: cpp
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # Command-line programs to run using the OS shell.
    # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:cpp"

  build-linux:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [debug, release]
        target: [static_lib, shared_lib, cmd]

    steps:
    - uses: actions/checkout@v3
    - name: build ${{matrix.target}}
      run: |
        ${{matrix.target}}/build.sh ${{matrix.config}}

    - uses: actions/upload-artifact@v3
      name: upload ${{matrix.target}}
      with:
        name: linux_x64-${{matrix.target}}-${{matrix.config}}
        path: |
          build/**
          !build/**/*.o
          !build/**/third-party/**

  test-linux:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [debug, release]
    steps:
    - uses: actions/checkout@v3
    - name: build test
      run: |
        test/build.sh ${{matrix.config}}
    - name: run tests
      run: |
        cd ./test
        ../build/linux_x64/test/${{matrix.config}}/test
        cd ..

  dist-linux:

    needs: build-linux
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        path: build/artifacts
    - name: build dist
      run: |
        ./dist.sh
    - uses: actions/upload-artifact@master
      with:
        name: dist-linux-x64
        path: dist

  build-darwin:

    runs-on: macos-latest
    strategy:
      matrix:
        config: [debug, release]
        target: [static_lib, shared_lib, cmd]

    steps:
    - uses: actions/checkout@v3
    - name: build ${{matrix.target}}
      run: |
        ${{matrix.target}}/build.sh ${{matrix.config}}

    - uses: actions/upload-artifact@v3
      name: upload ${{matrix.target}}
      with:
        name: darwin_x64-${{matrix.target}}-${{matrix.config}}
        path: |
          build/**
          !build/**/*.o
          !build/**/third-party/**

  test-darwin:

    runs-on: macos-latest
    strategy:
      matrix:
        config: [debug, release]
    steps:
    - uses: actions/checkout@v3
    - name: build test
      run: |
        test/build.sh ${{matrix.config}}
    - name: run tests
      run: |
        cd ./test
        ../build/darwin_x64/test/${{matrix.config}}/test
        cd ..

  dist-darwin:

    needs: build-darwin
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        path: build/artifacts
    - name: build dist
      run: |
        ./dist.sh
    - uses: actions/upload-artifact@master
      with:
        name: dist-darwin-x64
        path: dist

  build-win32:

    runs-on: windows-latest
    strategy:
      matrix:
        config: [debug, release]
        target: [static_lib, shared_lib, cmd]

    steps:
    - uses: actions/checkout@v3
    - name: build ${{matrix.target}}
      run: |
        ${{matrix.target}}/build.bat ${{matrix.config}}

    - uses: actions/upload-artifact@v3
      name: upload ${{matrix.target}}
      with:
        name: win32_x64-${{matrix.target}}-${{matrix.config}}
        path: |
          build/**
          !build/**/*.obj
          !build/**/*.o
          !build/**/third-party/**

  test-win32:

    runs-on: windows-latest
    strategy:
      matrix:
        config: [debug, release]
    steps:
    - uses: actions/checkout@v3
    - name: build test
      run: |
        test/build.bat ${{matrix.config}}
    - name: run tests
      run: |
        cd ./test
        ../build/win32_x64/test/${{matrix.config}}/test.exe
        cd ..

  dist-win32:

    needs: build-win32
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        path: build/artifacts
    - name: build dist
      run: |
        ./dist.bat
    - uses: actions/upload-artifact@master
      with:
        name: dist-win32-x64
        path: dist
