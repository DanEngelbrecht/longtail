name: Create Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build-linux:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [debug, release]
        target: [static_lib, shared_lib, cmd]

    steps:
    - uses: actions/checkout@v2
    - name: build ${{matrix.target}}
      run: |
        ${{matrix.target}}/build.sh ${{matrix.config}}

    - uses: actions/upload-artifact@v3
      name: upload ${{matrix.target}}
      with:
        name: linux_x64-${{matrix.target}}-${{matrix.config}}
        path: |
          build/**
          !build/**/*.o
          !build/**/third-party/**

  dist-linux:

    needs: build-linux
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v3
      with:
        path: build/artifacts
    - name: build dist
      run: |
        ./dist.sh
    - uses: actions/upload-artifact@master
      with:
        name: dist-linux-x64
        path: dist

  build-darwin:

    runs-on: macos-latest
    strategy:
      matrix:
        config: [debug, release]
        target: [static_lib, shared_lib, cmd]

    steps:
    - uses: actions/checkout@v2
    - name: build ${{matrix.target}}
      run: |
        ${{matrix.target}}/build.sh ${{matrix.config}}

    - uses: actions/upload-artifact@v3
      name: upload ${{matrix.target}}
      with:
        name: darwin_x64-${{matrix.target}}-${{matrix.config}}
        path: |
          build/**
          !build/**/*.o
          !build/**/third-party/**

  dist-darwin:

    needs: build-darwin
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v3
      with:
        path: build/artifacts
    - name: build dist
      run: |
        ./dist.sh
    - uses: actions/upload-artifact@master
      with:
        name: dist-darwin-x64
        path: dist

  build-win32:

    runs-on: windows-latest
    strategy:
      matrix:
        config: [debug, release]
        target: [static_lib, shared_lib, cmd]

    steps:
    - uses: actions/checkout@v2
    - name: build ${{matrix.target}}
      run: |
        ${{matrix.target}}/build.bat ${{matrix.config}}

    - uses: actions/upload-artifact@v3
      name: upload ${{matrix.target}}
      with:
        name: win32_x64-${{matrix.target}}-${{matrix.config}}
        path: |
          build/**
          !build/**/*.obj
          !build/**/*.o
          !build/**/third-party/**

  dist-win32:

    needs: build-win32
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v3
      with:
        path: build/artifacts
    - name: build dist
      run: |
        ./dist.bat
    - uses: actions/upload-artifact@master
      with:
        name: dist-win32-x64
        path: dist

  create-release:

    runs-on: ubuntu-latest

    needs: [dist-linux, dist-darwin, dist-win32]

    steps:
    - name: Checkout code
      uses: actions/checkout@master
    - name: Set RELEASE_VERSION env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Download Linux artifacts
      uses: actions/download-artifact@v1
      with:
        name: dist-linux-x64
        path: dist-linux-x64
    - name: Download Win32 artifacts
      uses: actions/download-artifact@v1
      with:
        name: dist-win32-x64
        path: dist-win32-x64
    - name: Download darwin artifacts
      uses: actions/download-artifact@v1
      with:
        name: dist-darwin-x64
        path: dist-darwin-x64
    - name: Zip Linux artifacts
      uses: montudor/action-zip@v0.1.0
      with:
        args: zip -qq -r ./linux-x64.zip ./dist-linux-x64
    - name: Zip Win32 artifacts
      uses: montudor/action-zip@v0.1.0
      with:
        args: zip -qq -r ./win32-x64.zip ./dist-win32-x64
    - name: Zip darwin artifacts
      uses: montudor/action-zip@v0.1.0
      with:
        args: zip -qq -r ./darwin-x64.zip ./dist-darwin-x64
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: Release ${{ env.RELEASE_VERSION }}
        body: |
          # Changes in this Release
          - **CHANGED API** `Longtail_StorageAPI.CreateDirectory` is now expected to create the full path hierarchy
          - **CHANGED API** `Longtail_CreateDefaultCompressionRegistry` now takes callback functions to create compression apis, this makes it possible to add new compression settings for a compression type without breaking older versions
          - **NEW API** `Longtail_GetZStdHighQuality`, `Longtail_GetZStdLowQuality` added
          - **NEW API** `Longtail_CompressionRegistry_CreateForBrotli`, `Longtail_CompressionRegistry_CreateForLZ4`, `Longtail_CompressionRegistry_CreateForZstd`
          - **FIX** Add retry when opening files and creating directories on Win32 platform due to network drives sometimes being slow in picking up created directories
          - **FIX** Add path in log context in `FSStorageAPI_LockFile`
          - **FIX** Add input parameter validation in `FSStorageAPI_LockFile`, `FSStorageAPI_UnlockFile`, `InMemStorageAPI_LockFile` and `InMemStorageAPI_UnlockFile`
          - **FIX** Restructured build scripts and GitHub workflows to allow more parallel builds
          - **FIX** Use correct path for lock file in fsblockstore on Mac and Linux
        draft: false
        prerelease: false
        files: "*-x64.zip"
